description = 'Analysis'

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$project.ext.springBootVersion")
		classpath("io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE")
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

apply plugin: 'java'
apply plugin: "groovy"
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'docker'


war {
	baseName = 'analysisservice'
	version = '0.0.1-SNAPSHOT'
}

configurations {
	providedRuntime
}

dependencies {
	compile project(":core")
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("org.springframework.boot:spring-boot-starter-hateoas")
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("io.springfox:springfox-swagger2:2.2.2")
	compile("io.springfox:springfox-swagger-ui:2.2.2")
	compile("com.fasterxml.jackson.core:jackson-databind:2.6.3") // Required as the Spring Hateaos version pulled in by Swagger is incompatible with Jackson 2.4
	

	runtime("org.hsqldb:hsqldb") 
	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

	testCompile project(path: ':core', configuration: 'testutils')
	testCompile("org.springframework.boot:spring-boot-starter-test") 
	testCompile("junit:junit:4.12") 

	// mandatory dependencies for using Spock
	testCompile "org.codehaus.groovy:groovy-all:2.4.5"
	testCompile "org.spockframework:spock-core:1.0-groovy-2.4"

	// optional dependencies for using Spock
	testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
	testRuntime "cglib:cglib-nodep:3.1"			 // allows mocking of classes (in addition to interfaces)
	testRuntime "org.objenesis:objenesis:2.2"	 // allows mocking of classes without default constructor (together with CGLIB)
	testCompile "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
}

test {
	enableAssertions=true
}

run {
	enableAssertions=true

    if ( project.hasProperty('analysisservice.debug') || project.hasProperty('debug.all')) {
        jvmArgs "-Xdebug", "-Xrunjdwp:transport=dt_socket,address=" + project.ext.yona_analysisservice_debug_port + ",server=y,suspend=n"
    }
   
	systemProperties = [
		'server.port': System.getProperty('server.port', project.ext.yona_analysisservice_port)
	]
}

group = 'yonadev'

task buildDocker(type: Docker, dependsOn: build) {
  push = true
  applicationName = jar.baseName
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
    copy {
      from jar
      into stageDir
	  rename jar.archiveName, jar.baseName +".jar"
    }
  }
}

sourceSets {
	intTest {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}
}

configurations {
	intTestCompile.extendsFrom testCompile
	intTestRuntime.extendsFrom testRuntime
}

task intTest(type:Test){
	description = "Run integration tests (located in src/intTest/...)."
	testClassesDir = project.sourceSets.intTest.output.classesDir
	classpath = project.sourceSets.intTest.runtimeClasspath

	systemProperties = [
		'yona.adminservice.url': project.ext.yona_adminservice_url,
		'yona.analysisservice.url': project.ext.yona_analysisservice_url,
		'yona.appservice.url': project.ext.yona_appservice_url
	]
}
